/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dsi.intranet.eprocurement.service.base;

import aQute.bnd.annotation.ProviderType;

import com.dsi.intranet.eprocurement.model.WorkflowRequest;
import com.dsi.intranet.eprocurement.service.WorkflowRequestLocalService;
import com.dsi.intranet.eprocurement.service.persistence.EprocurementLocationPersistence;
import com.dsi.intranet.eprocurement.service.persistence.EprocurementRequestPersistence;
import com.dsi.intranet.eprocurement.service.persistence.ItemPersistence;
import com.dsi.intranet.eprocurement.service.persistence.RequestAttachmentPersistence;
import com.dsi.intranet.eprocurement.service.persistence.WorkflowDefinitionPersistence;
import com.dsi.intranet.eprocurement.service.persistence.WorkflowRequestPersistence;
import com.dsi.intranet.eprocurement.service.persistence.WorkflowReviewPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the workflow request local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.dsi.intranet.eprocurement.service.impl.WorkflowRequestLocalServiceImpl}.
 * </p>
 *
 * @author CIGNEX Technologies
 * @see com.dsi.intranet.eprocurement.service.impl.WorkflowRequestLocalServiceImpl
 * @see com.dsi.intranet.eprocurement.service.WorkflowRequestLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class WorkflowRequestLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements WorkflowRequestLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.dsi.intranet.eprocurement.service.WorkflowRequestLocalServiceUtil} to access the workflow request local service.
	 */

	/**
	 * Adds the workflow request to the database. Also notifies the appropriate model listeners.
	 *
	 * @param workflowRequest the workflow request
	 * @return the workflow request that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WorkflowRequest addWorkflowRequest(WorkflowRequest workflowRequest) {
		workflowRequest.setNew(true);

		return workflowRequestPersistence.update(workflowRequest);
	}

	/**
	 * Creates a new workflow request with the primary key. Does not add the workflow request to the database.
	 *
	 * @param workflowRequestId the primary key for the new workflow request
	 * @return the new workflow request
	 */
	@Override
	public WorkflowRequest createWorkflowRequest(long workflowRequestId) {
		return workflowRequestPersistence.create(workflowRequestId);
	}

	/**
	 * Deletes the workflow request with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param workflowRequestId the primary key of the workflow request
	 * @return the workflow request that was removed
	 * @throws PortalException if a workflow request with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WorkflowRequest deleteWorkflowRequest(long workflowRequestId)
		throws PortalException {
		return workflowRequestPersistence.remove(workflowRequestId);
	}

	/**
	 * Deletes the workflow request from the database. Also notifies the appropriate model listeners.
	 *
	 * @param workflowRequest the workflow request
	 * @return the workflow request that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public WorkflowRequest deleteWorkflowRequest(
		WorkflowRequest workflowRequest) {
		return workflowRequestPersistence.remove(workflowRequest);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(WorkflowRequest.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return workflowRequestPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dsi.intranet.eprocurement.model.impl.WorkflowRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return workflowRequestPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dsi.intranet.eprocurement.model.impl.WorkflowRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return workflowRequestPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return workflowRequestPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return workflowRequestPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public WorkflowRequest fetchWorkflowRequest(long workflowRequestId) {
		return workflowRequestPersistence.fetchByPrimaryKey(workflowRequestId);
	}

	/**
	 * Returns the workflow request with the primary key.
	 *
	 * @param workflowRequestId the primary key of the workflow request
	 * @return the workflow request
	 * @throws PortalException if a workflow request with the primary key could not be found
	 */
	@Override
	public WorkflowRequest getWorkflowRequest(long workflowRequestId)
		throws PortalException {
		return workflowRequestPersistence.findByPrimaryKey(workflowRequestId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(workflowRequestLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(WorkflowRequest.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("workflowRequestId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(workflowRequestLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(WorkflowRequest.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"workflowRequestId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(workflowRequestLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(WorkflowRequest.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("workflowRequestId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return workflowRequestLocalService.deleteWorkflowRequest((WorkflowRequest)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return workflowRequestPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the workflow requests.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dsi.intranet.eprocurement.model.impl.WorkflowRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of workflow requests
	 * @param end the upper bound of the range of workflow requests (not inclusive)
	 * @return the range of workflow requests
	 */
	@Override
	public List<WorkflowRequest> getWorkflowRequests(int start, int end) {
		return workflowRequestPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of workflow requests.
	 *
	 * @return the number of workflow requests
	 */
	@Override
	public int getWorkflowRequestsCount() {
		return workflowRequestPersistence.countAll();
	}

	/**
	 * Updates the workflow request in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param workflowRequest the workflow request
	 * @return the workflow request that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public WorkflowRequest updateWorkflowRequest(
		WorkflowRequest workflowRequest) {
		return workflowRequestPersistence.update(workflowRequest);
	}

	/**
	 * Returns the eprocurement location local service.
	 *
	 * @return the eprocurement location local service
	 */
	public com.dsi.intranet.eprocurement.service.EprocurementLocationLocalService getEprocurementLocationLocalService() {
		return eprocurementLocationLocalService;
	}

	/**
	 * Sets the eprocurement location local service.
	 *
	 * @param eprocurementLocationLocalService the eprocurement location local service
	 */
	public void setEprocurementLocationLocalService(
		com.dsi.intranet.eprocurement.service.EprocurementLocationLocalService eprocurementLocationLocalService) {
		this.eprocurementLocationLocalService = eprocurementLocationLocalService;
	}

	/**
	 * Returns the eprocurement location persistence.
	 *
	 * @return the eprocurement location persistence
	 */
	public EprocurementLocationPersistence getEprocurementLocationPersistence() {
		return eprocurementLocationPersistence;
	}

	/**
	 * Sets the eprocurement location persistence.
	 *
	 * @param eprocurementLocationPersistence the eprocurement location persistence
	 */
	public void setEprocurementLocationPersistence(
		EprocurementLocationPersistence eprocurementLocationPersistence) {
		this.eprocurementLocationPersistence = eprocurementLocationPersistence;
	}

	/**
	 * Returns the eprocurement request local service.
	 *
	 * @return the eprocurement request local service
	 */
	public com.dsi.intranet.eprocurement.service.EprocurementRequestLocalService getEprocurementRequestLocalService() {
		return eprocurementRequestLocalService;
	}

	/**
	 * Sets the eprocurement request local service.
	 *
	 * @param eprocurementRequestLocalService the eprocurement request local service
	 */
	public void setEprocurementRequestLocalService(
		com.dsi.intranet.eprocurement.service.EprocurementRequestLocalService eprocurementRequestLocalService) {
		this.eprocurementRequestLocalService = eprocurementRequestLocalService;
	}

	/**
	 * Returns the eprocurement request persistence.
	 *
	 * @return the eprocurement request persistence
	 */
	public EprocurementRequestPersistence getEprocurementRequestPersistence() {
		return eprocurementRequestPersistence;
	}

	/**
	 * Sets the eprocurement request persistence.
	 *
	 * @param eprocurementRequestPersistence the eprocurement request persistence
	 */
	public void setEprocurementRequestPersistence(
		EprocurementRequestPersistence eprocurementRequestPersistence) {
		this.eprocurementRequestPersistence = eprocurementRequestPersistence;
	}

	/**
	 * Returns the item local service.
	 *
	 * @return the item local service
	 */
	public com.dsi.intranet.eprocurement.service.ItemLocalService getItemLocalService() {
		return itemLocalService;
	}

	/**
	 * Sets the item local service.
	 *
	 * @param itemLocalService the item local service
	 */
	public void setItemLocalService(
		com.dsi.intranet.eprocurement.service.ItemLocalService itemLocalService) {
		this.itemLocalService = itemLocalService;
	}

	/**
	 * Returns the item persistence.
	 *
	 * @return the item persistence
	 */
	public ItemPersistence getItemPersistence() {
		return itemPersistence;
	}

	/**
	 * Sets the item persistence.
	 *
	 * @param itemPersistence the item persistence
	 */
	public void setItemPersistence(ItemPersistence itemPersistence) {
		this.itemPersistence = itemPersistence;
	}

	/**
	 * Returns the request attachment local service.
	 *
	 * @return the request attachment local service
	 */
	public com.dsi.intranet.eprocurement.service.RequestAttachmentLocalService getRequestAttachmentLocalService() {
		return requestAttachmentLocalService;
	}

	/**
	 * Sets the request attachment local service.
	 *
	 * @param requestAttachmentLocalService the request attachment local service
	 */
	public void setRequestAttachmentLocalService(
		com.dsi.intranet.eprocurement.service.RequestAttachmentLocalService requestAttachmentLocalService) {
		this.requestAttachmentLocalService = requestAttachmentLocalService;
	}

	/**
	 * Returns the request attachment persistence.
	 *
	 * @return the request attachment persistence
	 */
	public RequestAttachmentPersistence getRequestAttachmentPersistence() {
		return requestAttachmentPersistence;
	}

	/**
	 * Sets the request attachment persistence.
	 *
	 * @param requestAttachmentPersistence the request attachment persistence
	 */
	public void setRequestAttachmentPersistence(
		RequestAttachmentPersistence requestAttachmentPersistence) {
		this.requestAttachmentPersistence = requestAttachmentPersistence;
	}

	/**
	 * Returns the workflow definition local service.
	 *
	 * @return the workflow definition local service
	 */
	public com.dsi.intranet.eprocurement.service.WorkflowDefinitionLocalService getWorkflowDefinitionLocalService() {
		return workflowDefinitionLocalService;
	}

	/**
	 * Sets the workflow definition local service.
	 *
	 * @param workflowDefinitionLocalService the workflow definition local service
	 */
	public void setWorkflowDefinitionLocalService(
		com.dsi.intranet.eprocurement.service.WorkflowDefinitionLocalService workflowDefinitionLocalService) {
		this.workflowDefinitionLocalService = workflowDefinitionLocalService;
	}

	/**
	 * Returns the workflow definition persistence.
	 *
	 * @return the workflow definition persistence
	 */
	public WorkflowDefinitionPersistence getWorkflowDefinitionPersistence() {
		return workflowDefinitionPersistence;
	}

	/**
	 * Sets the workflow definition persistence.
	 *
	 * @param workflowDefinitionPersistence the workflow definition persistence
	 */
	public void setWorkflowDefinitionPersistence(
		WorkflowDefinitionPersistence workflowDefinitionPersistence) {
		this.workflowDefinitionPersistence = workflowDefinitionPersistence;
	}

	/**
	 * Returns the workflow request local service.
	 *
	 * @return the workflow request local service
	 */
	public WorkflowRequestLocalService getWorkflowRequestLocalService() {
		return workflowRequestLocalService;
	}

	/**
	 * Sets the workflow request local service.
	 *
	 * @param workflowRequestLocalService the workflow request local service
	 */
	public void setWorkflowRequestLocalService(
		WorkflowRequestLocalService workflowRequestLocalService) {
		this.workflowRequestLocalService = workflowRequestLocalService;
	}

	/**
	 * Returns the workflow request persistence.
	 *
	 * @return the workflow request persistence
	 */
	public WorkflowRequestPersistence getWorkflowRequestPersistence() {
		return workflowRequestPersistence;
	}

	/**
	 * Sets the workflow request persistence.
	 *
	 * @param workflowRequestPersistence the workflow request persistence
	 */
	public void setWorkflowRequestPersistence(
		WorkflowRequestPersistence workflowRequestPersistence) {
		this.workflowRequestPersistence = workflowRequestPersistence;
	}

	/**
	 * Returns the workflow review local service.
	 *
	 * @return the workflow review local service
	 */
	public com.dsi.intranet.eprocurement.service.WorkflowReviewLocalService getWorkflowReviewLocalService() {
		return workflowReviewLocalService;
	}

	/**
	 * Sets the workflow review local service.
	 *
	 * @param workflowReviewLocalService the workflow review local service
	 */
	public void setWorkflowReviewLocalService(
		com.dsi.intranet.eprocurement.service.WorkflowReviewLocalService workflowReviewLocalService) {
		this.workflowReviewLocalService = workflowReviewLocalService;
	}

	/**
	 * Returns the workflow review persistence.
	 *
	 * @return the workflow review persistence
	 */
	public WorkflowReviewPersistence getWorkflowReviewPersistence() {
		return workflowReviewPersistence;
	}

	/**
	 * Sets the workflow review persistence.
	 *
	 * @param workflowReviewPersistence the workflow review persistence
	 */
	public void setWorkflowReviewPersistence(
		WorkflowReviewPersistence workflowReviewPersistence) {
		this.workflowReviewPersistence = workflowReviewPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.dsi.intranet.eprocurement.model.WorkflowRequest",
			workflowRequestLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.dsi.intranet.eprocurement.model.WorkflowRequest");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return WorkflowRequestLocalService.class.getName();
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return WorkflowRequest.class;
	}

	protected String getModelClassName() {
		return WorkflowRequest.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = workflowRequestPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.dsi.intranet.eprocurement.service.EprocurementLocationLocalService.class)
	protected com.dsi.intranet.eprocurement.service.EprocurementLocationLocalService eprocurementLocationLocalService;
	@BeanReference(type = EprocurementLocationPersistence.class)
	protected EprocurementLocationPersistence eprocurementLocationPersistence;
	@BeanReference(type = com.dsi.intranet.eprocurement.service.EprocurementRequestLocalService.class)
	protected com.dsi.intranet.eprocurement.service.EprocurementRequestLocalService eprocurementRequestLocalService;
	@BeanReference(type = EprocurementRequestPersistence.class)
	protected EprocurementRequestPersistence eprocurementRequestPersistence;
	@BeanReference(type = com.dsi.intranet.eprocurement.service.ItemLocalService.class)
	protected com.dsi.intranet.eprocurement.service.ItemLocalService itemLocalService;
	@BeanReference(type = ItemPersistence.class)
	protected ItemPersistence itemPersistence;
	@BeanReference(type = com.dsi.intranet.eprocurement.service.RequestAttachmentLocalService.class)
	protected com.dsi.intranet.eprocurement.service.RequestAttachmentLocalService requestAttachmentLocalService;
	@BeanReference(type = RequestAttachmentPersistence.class)
	protected RequestAttachmentPersistence requestAttachmentPersistence;
	@BeanReference(type = com.dsi.intranet.eprocurement.service.WorkflowDefinitionLocalService.class)
	protected com.dsi.intranet.eprocurement.service.WorkflowDefinitionLocalService workflowDefinitionLocalService;
	@BeanReference(type = WorkflowDefinitionPersistence.class)
	protected WorkflowDefinitionPersistence workflowDefinitionPersistence;
	@BeanReference(type = WorkflowRequestLocalService.class)
	protected WorkflowRequestLocalService workflowRequestLocalService;
	@BeanReference(type = WorkflowRequestPersistence.class)
	protected WorkflowRequestPersistence workflowRequestPersistence;
	@BeanReference(type = com.dsi.intranet.eprocurement.service.WorkflowReviewLocalService.class)
	protected com.dsi.intranet.eprocurement.service.WorkflowReviewLocalService workflowReviewLocalService;
	@BeanReference(type = WorkflowReviewPersistence.class)
	protected WorkflowReviewPersistence workflowReviewPersistence;
	@BeanReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@BeanReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@BeanReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private ClassLoader _classLoader;
	private WorkflowRequestLocalServiceClpInvoker _clpInvoker = new WorkflowRequestLocalServiceClpInvoker();
}