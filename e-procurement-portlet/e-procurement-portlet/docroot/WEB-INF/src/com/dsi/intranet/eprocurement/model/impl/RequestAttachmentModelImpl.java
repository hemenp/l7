/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dsi.intranet.eprocurement.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.dsi.intranet.eprocurement.model.RequestAttachment;
import com.dsi.intranet.eprocurement.model.RequestAttachmentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RequestAttachment service. Represents a row in the &quot;eproc_request_attachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RequestAttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RequestAttachmentImpl}.
 * </p>
 *
 * @author CIGNEX Technologies
 * @see RequestAttachmentImpl
 * @see RequestAttachment
 * @see RequestAttachmentModel
 * @generated
 */
@ProviderType
public class RequestAttachmentModelImpl extends BaseModelImpl<RequestAttachment>
	implements RequestAttachmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a request attachment model instance should use the {@link RequestAttachment} interface instead.
	 */
	public static final String TABLE_NAME = "eproc_request_attachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "requestAttachmentId", Types.BIGINT },
			{ "requestId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("requestAttachmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table eproc_request_attachment (requestAttachmentId LONG not null primary key,requestId LONG,fileEntryId LONG)";
	public static final String TABLE_SQL_DROP = "drop table eproc_request_attachment";
	public static final String ORDER_BY_JPQL = " ORDER BY requestAttachment.requestAttachmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eproc_request_attachment.requestAttachmentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dsi.intranet.eprocurement.model.RequestAttachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dsi.intranet.eprocurement.model.RequestAttachment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.dsi.intranet.eprocurement.model.RequestAttachment"),
			true);
	public static final long FILEENTRYID_COLUMN_BITMASK = 1L;
	public static final long REQUESTID_COLUMN_BITMASK = 2L;
	public static final long REQUESTATTACHMENTID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dsi.intranet.eprocurement.model.RequestAttachment"));

	public RequestAttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requestAttachmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequestAttachmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requestAttachmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RequestAttachment.class;
	}

	@Override
	public String getModelClassName() {
		return RequestAttachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("requestAttachmentId", getRequestAttachmentId());
		attributes.put("requestId", getRequestId());
		attributes.put("fileEntryId", getFileEntryId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long requestAttachmentId = (Long)attributes.get("requestAttachmentId");

		if (requestAttachmentId != null) {
			setRequestAttachmentId(requestAttachmentId);
		}

		Long requestId = (Long)attributes.get("requestId");

		if (requestId != null) {
			setRequestId(requestId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}
	}

	@Override
	public long getRequestAttachmentId() {
		return _requestAttachmentId;
	}

	@Override
	public void setRequestAttachmentId(long requestAttachmentId) {
		_requestAttachmentId = requestAttachmentId;
	}

	@Override
	public long getRequestId() {
		return _requestId;
	}

	@Override
	public void setRequestId(long requestId) {
		_columnBitmask |= REQUESTID_COLUMN_BITMASK;

		if (!_setOriginalRequestId) {
			_setOriginalRequestId = true;

			_originalRequestId = _requestId;
		}

		_requestId = requestId;
	}

	public long getOriginalRequestId() {
		return _originalRequestId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_columnBitmask |= FILEENTRYID_COLUMN_BITMASK;

		if (!_setOriginalFileEntryId) {
			_setOriginalFileEntryId = true;

			_originalFileEntryId = _fileEntryId;
		}

		_fileEntryId = fileEntryId;
	}

	public long getOriginalFileEntryId() {
		return _originalFileEntryId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			RequestAttachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RequestAttachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RequestAttachment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RequestAttachmentImpl requestAttachmentImpl = new RequestAttachmentImpl();

		requestAttachmentImpl.setRequestAttachmentId(getRequestAttachmentId());
		requestAttachmentImpl.setRequestId(getRequestId());
		requestAttachmentImpl.setFileEntryId(getFileEntryId());

		requestAttachmentImpl.resetOriginalValues();

		return requestAttachmentImpl;
	}

	@Override
	public int compareTo(RequestAttachment requestAttachment) {
		long primaryKey = requestAttachment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RequestAttachment)) {
			return false;
		}

		RequestAttachment requestAttachment = (RequestAttachment)obj;

		long primaryKey = requestAttachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RequestAttachmentModelImpl requestAttachmentModelImpl = this;

		requestAttachmentModelImpl._originalRequestId = requestAttachmentModelImpl._requestId;

		requestAttachmentModelImpl._setOriginalRequestId = false;

		requestAttachmentModelImpl._originalFileEntryId = requestAttachmentModelImpl._fileEntryId;

		requestAttachmentModelImpl._setOriginalFileEntryId = false;

		requestAttachmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RequestAttachment> toCacheModel() {
		RequestAttachmentCacheModel requestAttachmentCacheModel = new RequestAttachmentCacheModel();

		requestAttachmentCacheModel.requestAttachmentId = getRequestAttachmentId();

		requestAttachmentCacheModel.requestId = getRequestId();

		requestAttachmentCacheModel.fileEntryId = getFileEntryId();

		return requestAttachmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{requestAttachmentId=");
		sb.append(getRequestAttachmentId());
		sb.append(", requestId=");
		sb.append(getRequestId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.dsi.intranet.eprocurement.model.RequestAttachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>requestAttachmentId</column-name><column-value><![CDATA[");
		sb.append(getRequestAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestId</column-name><column-value><![CDATA[");
		sb.append(getRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = RequestAttachment.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			RequestAttachment.class
		};
	private long _requestAttachmentId;
	private long _requestId;
	private long _originalRequestId;
	private boolean _setOriginalRequestId;
	private long _fileEntryId;
	private long _originalFileEntryId;
	private boolean _setOriginalFileEntryId;
	private long _columnBitmask;
	private RequestAttachment _escapedModel;
}