/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dsi.intranet.eprocurement.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.dsi.intranet.eprocurement.model.EprocurementRequest;
import com.dsi.intranet.eprocurement.model.EprocurementRequestModel;
import com.dsi.intranet.eprocurement.model.EprocurementRequestSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EprocurementRequest service. Represents a row in the &quot;eproc_request&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EprocurementRequestModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EprocurementRequestImpl}.
 * </p>
 *
 * @author CIGNEX Technologies
 * @see EprocurementRequestImpl
 * @see EprocurementRequest
 * @see EprocurementRequestModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EprocurementRequestModelImpl extends BaseModelImpl<EprocurementRequest>
	implements EprocurementRequestModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a eprocurement request model instance should use the {@link EprocurementRequest} interface instead.
	 */
	public static final String TABLE_NAME = "eproc_request";
	public static final Object[][] TABLE_COLUMNS = {
			{ "requestId", Types.BIGINT },
			{ "shipToOther", Types.VARCHAR },
			{ "spendDepartment", Types.VARCHAR },
			{ "spendYear", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "zip", Types.VARCHAR },
			{ "isBudgetedRequest", Types.VARCHAR },
			{ "isRelatedtoProject", Types.VARCHAR },
			{ "projectName", Types.VARCHAR },
			{ "projectOwnerId", Types.BIGINT },
			{ "totalCost", Types.DOUBLE },
			{ "originalCost", Types.DOUBLE },
			{ "reason", Types.VARCHAR },
			{ "notes", Types.VARCHAR },
			{ "vendorCode", Types.VARCHAR },
			{ "vendorEmail", Types.VARCHAR },
			{ "contractId", Types.VARCHAR },
			{ "purchaseOrder", Types.VARCHAR },
			{ "itemInStock", Types.BOOLEAN },
			{ "recievedDate", Types.TIMESTAMP },
			{ "returnedDate", Types.TIMESTAMP },
			{ "assetInfo", Types.VARCHAR },
			{ "returnedAssets", Types.VARCHAR },
			{ "createdBy", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "requestorId", Types.BIGINT },
			{ "supervisorId", Types.BIGINT },
			{ "status", Types.VARCHAR },
			{ "stage", Types.VARCHAR },
			{ "nextStage", Types.VARCHAR },
			{ "isApproverRole", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("requestId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shipToOther", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spendDepartment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spendYear", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("zip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isBudgetedRequest", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isRelatedtoProject", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectOwnerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("totalCost", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("originalCost", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("reason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("notes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vendorCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vendorEmail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contractId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("purchaseOrder", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("itemInStock", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("recievedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("returnedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("assetInfo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("returnedAssets", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("supervisorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nextStage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isApproverRole", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table eproc_request (requestId LONG not null primary key,shipToOther VARCHAR(75) null,spendDepartment VARCHAR(75) null,spendYear VARCHAR(75) null,address VARCHAR(75) null,city VARCHAR(75) null,state_ VARCHAR(75) null,zip VARCHAR(75) null,isBudgetedRequest VARCHAR(75) null,isRelatedtoProject VARCHAR(75) null,projectName VARCHAR(75) null,projectOwnerId LONG,totalCost DOUBLE,originalCost DOUBLE,reason VARCHAR(75) null,notes VARCHAR(75) null,vendorCode VARCHAR(75) null,vendorEmail VARCHAR(75) null,contractId VARCHAR(75) null,purchaseOrder VARCHAR(75) null,itemInStock BOOLEAN,recievedDate DATE null,returnedDate DATE null,assetInfo VARCHAR(75) null,returnedAssets VARCHAR(75) null,createdBy LONG,createdDate DATE null,modifiedBy LONG,modifiedDate DATE null,companyId LONG,groupId LONG,requestorId LONG,supervisorId LONG,status VARCHAR(75) null,stage VARCHAR(75) null,nextStage VARCHAR(75) null,isApproverRole VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eproc_request";
	public static final String ORDER_BY_JPQL = " ORDER BY eprocurementRequest.modifiedDate DESC, eprocurementRequest.createdDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY eproc_request.modifiedDate DESC, eproc_request.createdDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dsi.intranet.eprocurement.model.EprocurementRequest"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dsi.intranet.eprocurement.model.EprocurementRequest"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.dsi.intranet.eprocurement.model.EprocurementRequest"),
			true);
	public static final long CITY_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;
	public static final long REQUESTORID_COLUMN_BITMASK = 16L;
	public static final long STATUS_COLUMN_BITMASK = 32L;
	public static final long CREATEDDATE_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EprocurementRequest toModel(EprocurementRequestSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EprocurementRequest model = new EprocurementRequestImpl();

		model.setRequestId(soapModel.getRequestId());
		model.setShipToOther(soapModel.getShipToOther());
		model.setSpendDepartment(soapModel.getSpendDepartment());
		model.setSpendYear(soapModel.getSpendYear());
		model.setAddress(soapModel.getAddress());
		model.setCity(soapModel.getCity());
		model.setState(soapModel.getState());
		model.setZip(soapModel.getZip());
		model.setIsBudgetedRequest(soapModel.getIsBudgetedRequest());
		model.setIsRelatedtoProject(soapModel.getIsRelatedtoProject());
		model.setProjectName(soapModel.getProjectName());
		model.setProjectOwnerId(soapModel.getProjectOwnerId());
		model.setTotalCost(soapModel.getTotalCost());
		model.setOriginalCost(soapModel.getOriginalCost());
		model.setReason(soapModel.getReason());
		model.setNotes(soapModel.getNotes());
		model.setVendorCode(soapModel.getVendorCode());
		model.setVendorEmail(soapModel.getVendorEmail());
		model.setContractId(soapModel.getContractId());
		model.setPurchaseOrder(soapModel.getPurchaseOrder());
		model.setItemInStock(soapModel.getItemInStock());
		model.setRecievedDate(soapModel.getRecievedDate());
		model.setReturnedDate(soapModel.getReturnedDate());
		model.setAssetInfo(soapModel.getAssetInfo());
		model.setReturnedAssets(soapModel.getReturnedAssets());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setRequestorId(soapModel.getRequestorId());
		model.setSupervisorId(soapModel.getSupervisorId());
		model.setStatus(soapModel.getStatus());
		model.setStage(soapModel.getStage());
		model.setNextStage(soapModel.getNextStage());
		model.setIsApproverRole(soapModel.getIsApproverRole());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EprocurementRequest> toModels(
		EprocurementRequestSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EprocurementRequest> models = new ArrayList<EprocurementRequest>(soapModels.length);

		for (EprocurementRequestSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dsi.intranet.eprocurement.model.EprocurementRequest"));

	public EprocurementRequestModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _requestId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRequestId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _requestId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EprocurementRequest.class;
	}

	@Override
	public String getModelClassName() {
		return EprocurementRequest.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("requestId", getRequestId());
		attributes.put("shipToOther", getShipToOther());
		attributes.put("spendDepartment", getSpendDepartment());
		attributes.put("spendYear", getSpendYear());
		attributes.put("address", getAddress());
		attributes.put("city", getCity());
		attributes.put("state", getState());
		attributes.put("zip", getZip());
		attributes.put("isBudgetedRequest", getIsBudgetedRequest());
		attributes.put("isRelatedtoProject", getIsRelatedtoProject());
		attributes.put("projectName", getProjectName());
		attributes.put("projectOwnerId", getProjectOwnerId());
		attributes.put("totalCost", getTotalCost());
		attributes.put("originalCost", getOriginalCost());
		attributes.put("reason", getReason());
		attributes.put("notes", getNotes());
		attributes.put("vendorCode", getVendorCode());
		attributes.put("vendorEmail", getVendorEmail());
		attributes.put("contractId", getContractId());
		attributes.put("purchaseOrder", getPurchaseOrder());
		attributes.put("itemInStock", getItemInStock());
		attributes.put("recievedDate", getRecievedDate());
		attributes.put("returnedDate", getReturnedDate());
		attributes.put("assetInfo", getAssetInfo());
		attributes.put("returnedAssets", getReturnedAssets());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("requestorId", getRequestorId());
		attributes.put("supervisorId", getSupervisorId());
		attributes.put("status", getStatus());
		attributes.put("stage", getStage());
		attributes.put("nextStage", getNextStage());
		attributes.put("isApproverRole", getIsApproverRole());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long requestId = (Long)attributes.get("requestId");

		if (requestId != null) {
			setRequestId(requestId);
		}

		String shipToOther = (String)attributes.get("shipToOther");

		if (shipToOther != null) {
			setShipToOther(shipToOther);
		}

		String spendDepartment = (String)attributes.get("spendDepartment");

		if (spendDepartment != null) {
			setSpendDepartment(spendDepartment);
		}

		String spendYear = (String)attributes.get("spendYear");

		if (spendYear != null) {
			setSpendYear(spendYear);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String zip = (String)attributes.get("zip");

		if (zip != null) {
			setZip(zip);
		}

		String isBudgetedRequest = (String)attributes.get("isBudgetedRequest");

		if (isBudgetedRequest != null) {
			setIsBudgetedRequest(isBudgetedRequest);
		}

		String isRelatedtoProject = (String)attributes.get("isRelatedtoProject");

		if (isRelatedtoProject != null) {
			setIsRelatedtoProject(isRelatedtoProject);
		}

		String projectName = (String)attributes.get("projectName");

		if (projectName != null) {
			setProjectName(projectName);
		}

		Long projectOwnerId = (Long)attributes.get("projectOwnerId");

		if (projectOwnerId != null) {
			setProjectOwnerId(projectOwnerId);
		}

		Double totalCost = (Double)attributes.get("totalCost");

		if (totalCost != null) {
			setTotalCost(totalCost);
		}

		Double originalCost = (Double)attributes.get("originalCost");

		if (originalCost != null) {
			setOriginalCost(originalCost);
		}

		String reason = (String)attributes.get("reason");

		if (reason != null) {
			setReason(reason);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		String vendorCode = (String)attributes.get("vendorCode");

		if (vendorCode != null) {
			setVendorCode(vendorCode);
		}

		String vendorEmail = (String)attributes.get("vendorEmail");

		if (vendorEmail != null) {
			setVendorEmail(vendorEmail);
		}

		String contractId = (String)attributes.get("contractId");

		if (contractId != null) {
			setContractId(contractId);
		}

		String purchaseOrder = (String)attributes.get("purchaseOrder");

		if (purchaseOrder != null) {
			setPurchaseOrder(purchaseOrder);
		}

		Boolean itemInStock = (Boolean)attributes.get("itemInStock");

		if (itemInStock != null) {
			setItemInStock(itemInStock);
		}

		Date recievedDate = (Date)attributes.get("recievedDate");

		if (recievedDate != null) {
			setRecievedDate(recievedDate);
		}

		Date returnedDate = (Date)attributes.get("returnedDate");

		if (returnedDate != null) {
			setReturnedDate(returnedDate);
		}

		String assetInfo = (String)attributes.get("assetInfo");

		if (assetInfo != null) {
			setAssetInfo(assetInfo);
		}

		String returnedAssets = (String)attributes.get("returnedAssets");

		if (returnedAssets != null) {
			setReturnedAssets(returnedAssets);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long requestorId = (Long)attributes.get("requestorId");

		if (requestorId != null) {
			setRequestorId(requestorId);
		}

		Long supervisorId = (Long)attributes.get("supervisorId");

		if (supervisorId != null) {
			setSupervisorId(supervisorId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String stage = (String)attributes.get("stage");

		if (stage != null) {
			setStage(stage);
		}

		String nextStage = (String)attributes.get("nextStage");

		if (nextStage != null) {
			setNextStage(nextStage);
		}

		String isApproverRole = (String)attributes.get("isApproverRole");

		if (isApproverRole != null) {
			setIsApproverRole(isApproverRole);
		}
	}

	@JSON
	@Override
	public long getRequestId() {
		return _requestId;
	}

	@Override
	public void setRequestId(long requestId) {
		_requestId = requestId;
	}

	@JSON
	@Override
	public String getShipToOther() {
		if (_shipToOther == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipToOther;
		}
	}

	@Override
	public void setShipToOther(String shipToOther) {
		_shipToOther = shipToOther;
	}

	@JSON
	@Override
	public String getSpendDepartment() {
		if (_spendDepartment == null) {
			return StringPool.BLANK;
		}
		else {
			return _spendDepartment;
		}
	}

	@Override
	public void setSpendDepartment(String spendDepartment) {
		_spendDepartment = spendDepartment;
	}

	@JSON
	@Override
	public String getSpendYear() {
		if (_spendYear == null) {
			return StringPool.BLANK;
		}
		else {
			return _spendYear;
		}
	}

	@Override
	public void setSpendYear(String spendYear) {
		_spendYear = spendYear;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_columnBitmask |= CITY_COLUMN_BITMASK;

		if (_originalCity == null) {
			_originalCity = _city;
		}

		_city = city;
	}

	public String getOriginalCity() {
		return GetterUtil.getString(_originalCity);
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getZip() {
		if (_zip == null) {
			return StringPool.BLANK;
		}
		else {
			return _zip;
		}
	}

	@Override
	public void setZip(String zip) {
		_zip = zip;
	}

	@JSON
	@Override
	public String getIsBudgetedRequest() {
		if (_isBudgetedRequest == null) {
			return StringPool.BLANK;
		}
		else {
			return _isBudgetedRequest;
		}
	}

	@Override
	public void setIsBudgetedRequest(String isBudgetedRequest) {
		_isBudgetedRequest = isBudgetedRequest;
	}

	@JSON
	@Override
	public String getIsRelatedtoProject() {
		if (_isRelatedtoProject == null) {
			return StringPool.BLANK;
		}
		else {
			return _isRelatedtoProject;
		}
	}

	@Override
	public void setIsRelatedtoProject(String isRelatedtoProject) {
		_isRelatedtoProject = isRelatedtoProject;
	}

	@JSON
	@Override
	public String getProjectName() {
		if (_projectName == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectName;
		}
	}

	@Override
	public void setProjectName(String projectName) {
		_projectName = projectName;
	}

	@JSON
	@Override
	public long getProjectOwnerId() {
		return _projectOwnerId;
	}

	@Override
	public void setProjectOwnerId(long projectOwnerId) {
		_projectOwnerId = projectOwnerId;
	}

	@JSON
	@Override
	public double getTotalCost() {
		return _totalCost;
	}

	@Override
	public void setTotalCost(double totalCost) {
		_totalCost = totalCost;
	}

	@JSON
	@Override
	public double getOriginalCost() {
		return _originalCost;
	}

	@Override
	public void setOriginalCost(double originalCost) {
		_originalCost = originalCost;
	}

	@JSON
	@Override
	public String getReason() {
		if (_reason == null) {
			return StringPool.BLANK;
		}
		else {
			return _reason;
		}
	}

	@Override
	public void setReason(String reason) {
		_reason = reason;
	}

	@JSON
	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@JSON
	@Override
	public String getVendorCode() {
		if (_vendorCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _vendorCode;
		}
	}

	@Override
	public void setVendorCode(String vendorCode) {
		_vendorCode = vendorCode;
	}

	@JSON
	@Override
	public String getVendorEmail() {
		if (_vendorEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _vendorEmail;
		}
	}

	@Override
	public void setVendorEmail(String vendorEmail) {
		_vendorEmail = vendorEmail;
	}

	@JSON
	@Override
	public String getContractId() {
		if (_contractId == null) {
			return StringPool.BLANK;
		}
		else {
			return _contractId;
		}
	}

	@Override
	public void setContractId(String contractId) {
		_contractId = contractId;
	}

	@JSON
	@Override
	public String getPurchaseOrder() {
		if (_purchaseOrder == null) {
			return StringPool.BLANK;
		}
		else {
			return _purchaseOrder;
		}
	}

	@Override
	public void setPurchaseOrder(String purchaseOrder) {
		_purchaseOrder = purchaseOrder;
	}

	@JSON
	@Override
	public boolean getItemInStock() {
		return _itemInStock;
	}

	@JSON
	@Override
	public boolean isItemInStock() {
		return _itemInStock;
	}

	@Override
	public void setItemInStock(boolean itemInStock) {
		_itemInStock = itemInStock;
	}

	@JSON
	@Override
	public Date getRecievedDate() {
		return _recievedDate;
	}

	@Override
	public void setRecievedDate(Date recievedDate) {
		_recievedDate = recievedDate;
	}

	@JSON
	@Override
	public Date getReturnedDate() {
		return _returnedDate;
	}

	@Override
	public void setReturnedDate(Date returnedDate) {
		_returnedDate = returnedDate;
	}

	@JSON
	@Override
	public String getAssetInfo() {
		if (_assetInfo == null) {
			return StringPool.BLANK;
		}
		else {
			return _assetInfo;
		}
	}

	@Override
	public void setAssetInfo(String assetInfo) {
		_assetInfo = assetInfo;
	}

	@JSON
	@Override
	public String getReturnedAssets() {
		if (_returnedAssets == null) {
			return StringPool.BLANK;
		}
		else {
			return _returnedAssets;
		}
	}

	@Override
	public void setReturnedAssets(String returnedAssets) {
		_returnedAssets = returnedAssets;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_columnBitmask = -1L;

		_createdDate = createdDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		if (_originalModifiedDate == null) {
			_originalModifiedDate = _modifiedDate;
		}

		_modifiedDate = modifiedDate;
	}

	public Date getOriginalModifiedDate() {
		return _originalModifiedDate;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getRequestorId() {
		return _requestorId;
	}

	@Override
	public void setRequestorId(long requestorId) {
		_columnBitmask |= REQUESTORID_COLUMN_BITMASK;

		if (!_setOriginalRequestorId) {
			_setOriginalRequestorId = true;

			_originalRequestorId = _requestorId;
		}

		_requestorId = requestorId;
	}

	public long getOriginalRequestorId() {
		return _originalRequestorId;
	}

	@JSON
	@Override
	public long getSupervisorId() {
		return _supervisorId;
	}

	@Override
	public void setSupervisorId(long supervisorId) {
		_supervisorId = supervisorId;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@JSON
	@Override
	public String getStage() {
		if (_stage == null) {
			return StringPool.BLANK;
		}
		else {
			return _stage;
		}
	}

	@Override
	public void setStage(String stage) {
		_stage = stage;
	}

	@JSON
	@Override
	public String getNextStage() {
		if (_nextStage == null) {
			return StringPool.BLANK;
		}
		else {
			return _nextStage;
		}
	}

	@Override
	public void setNextStage(String nextStage) {
		_nextStage = nextStage;
	}

	@JSON
	@Override
	public String getIsApproverRole() {
		if (_isApproverRole == null) {
			return StringPool.BLANK;
		}
		else {
			return _isApproverRole;
		}
	}

	@Override
	public void setIsApproverRole(String isApproverRole) {
		_isApproverRole = isApproverRole;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EprocurementRequest.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EprocurementRequest toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EprocurementRequest)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EprocurementRequestImpl eprocurementRequestImpl = new EprocurementRequestImpl();

		eprocurementRequestImpl.setRequestId(getRequestId());
		eprocurementRequestImpl.setShipToOther(getShipToOther());
		eprocurementRequestImpl.setSpendDepartment(getSpendDepartment());
		eprocurementRequestImpl.setSpendYear(getSpendYear());
		eprocurementRequestImpl.setAddress(getAddress());
		eprocurementRequestImpl.setCity(getCity());
		eprocurementRequestImpl.setState(getState());
		eprocurementRequestImpl.setZip(getZip());
		eprocurementRequestImpl.setIsBudgetedRequest(getIsBudgetedRequest());
		eprocurementRequestImpl.setIsRelatedtoProject(getIsRelatedtoProject());
		eprocurementRequestImpl.setProjectName(getProjectName());
		eprocurementRequestImpl.setProjectOwnerId(getProjectOwnerId());
		eprocurementRequestImpl.setTotalCost(getTotalCost());
		eprocurementRequestImpl.setOriginalCost(getOriginalCost());
		eprocurementRequestImpl.setReason(getReason());
		eprocurementRequestImpl.setNotes(getNotes());
		eprocurementRequestImpl.setVendorCode(getVendorCode());
		eprocurementRequestImpl.setVendorEmail(getVendorEmail());
		eprocurementRequestImpl.setContractId(getContractId());
		eprocurementRequestImpl.setPurchaseOrder(getPurchaseOrder());
		eprocurementRequestImpl.setItemInStock(getItemInStock());
		eprocurementRequestImpl.setRecievedDate(getRecievedDate());
		eprocurementRequestImpl.setReturnedDate(getReturnedDate());
		eprocurementRequestImpl.setAssetInfo(getAssetInfo());
		eprocurementRequestImpl.setReturnedAssets(getReturnedAssets());
		eprocurementRequestImpl.setCreatedBy(getCreatedBy());
		eprocurementRequestImpl.setCreatedDate(getCreatedDate());
		eprocurementRequestImpl.setModifiedBy(getModifiedBy());
		eprocurementRequestImpl.setModifiedDate(getModifiedDate());
		eprocurementRequestImpl.setCompanyId(getCompanyId());
		eprocurementRequestImpl.setGroupId(getGroupId());
		eprocurementRequestImpl.setRequestorId(getRequestorId());
		eprocurementRequestImpl.setSupervisorId(getSupervisorId());
		eprocurementRequestImpl.setStatus(getStatus());
		eprocurementRequestImpl.setStage(getStage());
		eprocurementRequestImpl.setNextStage(getNextStage());
		eprocurementRequestImpl.setIsApproverRole(getIsApproverRole());

		eprocurementRequestImpl.resetOriginalValues();

		return eprocurementRequestImpl;
	}

	@Override
	public int compareTo(EprocurementRequest eprocurementRequest) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				eprocurementRequest.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getCreatedDate(),
				eprocurementRequest.getCreatedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EprocurementRequest)) {
			return false;
		}

		EprocurementRequest eprocurementRequest = (EprocurementRequest)obj;

		long primaryKey = eprocurementRequest.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		EprocurementRequestModelImpl eprocurementRequestModelImpl = this;

		eprocurementRequestModelImpl._originalCity = eprocurementRequestModelImpl._city;

		eprocurementRequestModelImpl._originalModifiedDate = eprocurementRequestModelImpl._modifiedDate;

		eprocurementRequestModelImpl._originalCompanyId = eprocurementRequestModelImpl._companyId;

		eprocurementRequestModelImpl._setOriginalCompanyId = false;

		eprocurementRequestModelImpl._originalGroupId = eprocurementRequestModelImpl._groupId;

		eprocurementRequestModelImpl._setOriginalGroupId = false;

		eprocurementRequestModelImpl._originalRequestorId = eprocurementRequestModelImpl._requestorId;

		eprocurementRequestModelImpl._setOriginalRequestorId = false;

		eprocurementRequestModelImpl._originalStatus = eprocurementRequestModelImpl._status;

		eprocurementRequestModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EprocurementRequest> toCacheModel() {
		EprocurementRequestCacheModel eprocurementRequestCacheModel = new EprocurementRequestCacheModel();

		eprocurementRequestCacheModel.requestId = getRequestId();

		eprocurementRequestCacheModel.shipToOther = getShipToOther();

		String shipToOther = eprocurementRequestCacheModel.shipToOther;

		if ((shipToOther != null) && (shipToOther.length() == 0)) {
			eprocurementRequestCacheModel.shipToOther = null;
		}

		eprocurementRequestCacheModel.spendDepartment = getSpendDepartment();

		String spendDepartment = eprocurementRequestCacheModel.spendDepartment;

		if ((spendDepartment != null) && (spendDepartment.length() == 0)) {
			eprocurementRequestCacheModel.spendDepartment = null;
		}

		eprocurementRequestCacheModel.spendYear = getSpendYear();

		String spendYear = eprocurementRequestCacheModel.spendYear;

		if ((spendYear != null) && (spendYear.length() == 0)) {
			eprocurementRequestCacheModel.spendYear = null;
		}

		eprocurementRequestCacheModel.address = getAddress();

		String address = eprocurementRequestCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			eprocurementRequestCacheModel.address = null;
		}

		eprocurementRequestCacheModel.city = getCity();

		String city = eprocurementRequestCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			eprocurementRequestCacheModel.city = null;
		}

		eprocurementRequestCacheModel.state = getState();

		String state = eprocurementRequestCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			eprocurementRequestCacheModel.state = null;
		}

		eprocurementRequestCacheModel.zip = getZip();

		String zip = eprocurementRequestCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			eprocurementRequestCacheModel.zip = null;
		}

		eprocurementRequestCacheModel.isBudgetedRequest = getIsBudgetedRequest();

		String isBudgetedRequest = eprocurementRequestCacheModel.isBudgetedRequest;

		if ((isBudgetedRequest != null) && (isBudgetedRequest.length() == 0)) {
			eprocurementRequestCacheModel.isBudgetedRequest = null;
		}

		eprocurementRequestCacheModel.isRelatedtoProject = getIsRelatedtoProject();

		String isRelatedtoProject = eprocurementRequestCacheModel.isRelatedtoProject;

		if ((isRelatedtoProject != null) && (isRelatedtoProject.length() == 0)) {
			eprocurementRequestCacheModel.isRelatedtoProject = null;
		}

		eprocurementRequestCacheModel.projectName = getProjectName();

		String projectName = eprocurementRequestCacheModel.projectName;

		if ((projectName != null) && (projectName.length() == 0)) {
			eprocurementRequestCacheModel.projectName = null;
		}

		eprocurementRequestCacheModel.projectOwnerId = getProjectOwnerId();

		eprocurementRequestCacheModel.totalCost = getTotalCost();

		eprocurementRequestCacheModel.originalCost = getOriginalCost();

		eprocurementRequestCacheModel.reason = getReason();

		String reason = eprocurementRequestCacheModel.reason;

		if ((reason != null) && (reason.length() == 0)) {
			eprocurementRequestCacheModel.reason = null;
		}

		eprocurementRequestCacheModel.notes = getNotes();

		String notes = eprocurementRequestCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			eprocurementRequestCacheModel.notes = null;
		}

		eprocurementRequestCacheModel.vendorCode = getVendorCode();

		String vendorCode = eprocurementRequestCacheModel.vendorCode;

		if ((vendorCode != null) && (vendorCode.length() == 0)) {
			eprocurementRequestCacheModel.vendorCode = null;
		}

		eprocurementRequestCacheModel.vendorEmail = getVendorEmail();

		String vendorEmail = eprocurementRequestCacheModel.vendorEmail;

		if ((vendorEmail != null) && (vendorEmail.length() == 0)) {
			eprocurementRequestCacheModel.vendorEmail = null;
		}

		eprocurementRequestCacheModel.contractId = getContractId();

		String contractId = eprocurementRequestCacheModel.contractId;

		if ((contractId != null) && (contractId.length() == 0)) {
			eprocurementRequestCacheModel.contractId = null;
		}

		eprocurementRequestCacheModel.purchaseOrder = getPurchaseOrder();

		String purchaseOrder = eprocurementRequestCacheModel.purchaseOrder;

		if ((purchaseOrder != null) && (purchaseOrder.length() == 0)) {
			eprocurementRequestCacheModel.purchaseOrder = null;
		}

		eprocurementRequestCacheModel.itemInStock = getItemInStock();

		Date recievedDate = getRecievedDate();

		if (recievedDate != null) {
			eprocurementRequestCacheModel.recievedDate = recievedDate.getTime();
		}
		else {
			eprocurementRequestCacheModel.recievedDate = Long.MIN_VALUE;
		}

		Date returnedDate = getReturnedDate();

		if (returnedDate != null) {
			eprocurementRequestCacheModel.returnedDate = returnedDate.getTime();
		}
		else {
			eprocurementRequestCacheModel.returnedDate = Long.MIN_VALUE;
		}

		eprocurementRequestCacheModel.assetInfo = getAssetInfo();

		String assetInfo = eprocurementRequestCacheModel.assetInfo;

		if ((assetInfo != null) && (assetInfo.length() == 0)) {
			eprocurementRequestCacheModel.assetInfo = null;
		}

		eprocurementRequestCacheModel.returnedAssets = getReturnedAssets();

		String returnedAssets = eprocurementRequestCacheModel.returnedAssets;

		if ((returnedAssets != null) && (returnedAssets.length() == 0)) {
			eprocurementRequestCacheModel.returnedAssets = null;
		}

		eprocurementRequestCacheModel.createdBy = getCreatedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			eprocurementRequestCacheModel.createdDate = createdDate.getTime();
		}
		else {
			eprocurementRequestCacheModel.createdDate = Long.MIN_VALUE;
		}

		eprocurementRequestCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eprocurementRequestCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eprocurementRequestCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eprocurementRequestCacheModel.companyId = getCompanyId();

		eprocurementRequestCacheModel.groupId = getGroupId();

		eprocurementRequestCacheModel.requestorId = getRequestorId();

		eprocurementRequestCacheModel.supervisorId = getSupervisorId();

		eprocurementRequestCacheModel.status = getStatus();

		String status = eprocurementRequestCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			eprocurementRequestCacheModel.status = null;
		}

		eprocurementRequestCacheModel.stage = getStage();

		String stage = eprocurementRequestCacheModel.stage;

		if ((stage != null) && (stage.length() == 0)) {
			eprocurementRequestCacheModel.stage = null;
		}

		eprocurementRequestCacheModel.nextStage = getNextStage();

		String nextStage = eprocurementRequestCacheModel.nextStage;

		if ((nextStage != null) && (nextStage.length() == 0)) {
			eprocurementRequestCacheModel.nextStage = null;
		}

		eprocurementRequestCacheModel.isApproverRole = getIsApproverRole();

		String isApproverRole = eprocurementRequestCacheModel.isApproverRole;

		if ((isApproverRole != null) && (isApproverRole.length() == 0)) {
			eprocurementRequestCacheModel.isApproverRole = null;
		}

		return eprocurementRequestCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(75);

		sb.append("{requestId=");
		sb.append(getRequestId());
		sb.append(", shipToOther=");
		sb.append(getShipToOther());
		sb.append(", spendDepartment=");
		sb.append(getSpendDepartment());
		sb.append(", spendYear=");
		sb.append(getSpendYear());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", zip=");
		sb.append(getZip());
		sb.append(", isBudgetedRequest=");
		sb.append(getIsBudgetedRequest());
		sb.append(", isRelatedtoProject=");
		sb.append(getIsRelatedtoProject());
		sb.append(", projectName=");
		sb.append(getProjectName());
		sb.append(", projectOwnerId=");
		sb.append(getProjectOwnerId());
		sb.append(", totalCost=");
		sb.append(getTotalCost());
		sb.append(", originalCost=");
		sb.append(getOriginalCost());
		sb.append(", reason=");
		sb.append(getReason());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", vendorCode=");
		sb.append(getVendorCode());
		sb.append(", vendorEmail=");
		sb.append(getVendorEmail());
		sb.append(", contractId=");
		sb.append(getContractId());
		sb.append(", purchaseOrder=");
		sb.append(getPurchaseOrder());
		sb.append(", itemInStock=");
		sb.append(getItemInStock());
		sb.append(", recievedDate=");
		sb.append(getRecievedDate());
		sb.append(", returnedDate=");
		sb.append(getReturnedDate());
		sb.append(", assetInfo=");
		sb.append(getAssetInfo());
		sb.append(", returnedAssets=");
		sb.append(getReturnedAssets());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", requestorId=");
		sb.append(getRequestorId());
		sb.append(", supervisorId=");
		sb.append(getSupervisorId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", stage=");
		sb.append(getStage());
		sb.append(", nextStage=");
		sb.append(getNextStage());
		sb.append(", isApproverRole=");
		sb.append(getIsApproverRole());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(115);

		sb.append("<model><model-name>");
		sb.append("com.dsi.intranet.eprocurement.model.EprocurementRequest");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>requestId</column-name><column-value><![CDATA[");
		sb.append(getRequestId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipToOther</column-name><column-value><![CDATA[");
		sb.append(getShipToOther());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spendDepartment</column-name><column-value><![CDATA[");
		sb.append(getSpendDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spendYear</column-name><column-value><![CDATA[");
		sb.append(getSpendYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zip</column-name><column-value><![CDATA[");
		sb.append(getZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isBudgetedRequest</column-name><column-value><![CDATA[");
		sb.append(getIsBudgetedRequest());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isRelatedtoProject</column-name><column-value><![CDATA[");
		sb.append(getIsRelatedtoProject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectName</column-name><column-value><![CDATA[");
		sb.append(getProjectName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectOwnerId</column-name><column-value><![CDATA[");
		sb.append(getProjectOwnerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCost</column-name><column-value><![CDATA[");
		sb.append(getTotalCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>originalCost</column-name><column-value><![CDATA[");
		sb.append(getOriginalCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reason</column-name><column-value><![CDATA[");
		sb.append(getReason());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vendorCode</column-name><column-value><![CDATA[");
		sb.append(getVendorCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vendorEmail</column-name><column-value><![CDATA[");
		sb.append(getVendorEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractId</column-name><column-value><![CDATA[");
		sb.append(getContractId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>purchaseOrder</column-name><column-value><![CDATA[");
		sb.append(getPurchaseOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>itemInStock</column-name><column-value><![CDATA[");
		sb.append(getItemInStock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recievedDate</column-name><column-value><![CDATA[");
		sb.append(getRecievedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>returnedDate</column-name><column-value><![CDATA[");
		sb.append(getReturnedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetInfo</column-name><column-value><![CDATA[");
		sb.append(getAssetInfo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>returnedAssets</column-name><column-value><![CDATA[");
		sb.append(getReturnedAssets());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestorId</column-name><column-value><![CDATA[");
		sb.append(getRequestorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>supervisorId</column-name><column-value><![CDATA[");
		sb.append(getSupervisorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stage</column-name><column-value><![CDATA[");
		sb.append(getStage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextStage</column-name><column-value><![CDATA[");
		sb.append(getNextStage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isApproverRole</column-name><column-value><![CDATA[");
		sb.append(getIsApproverRole());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EprocurementRequest.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EprocurementRequest.class
		};
	private long _requestId;
	private String _shipToOther;
	private String _spendDepartment;
	private String _spendYear;
	private String _address;
	private String _city;
	private String _originalCity;
	private String _state;
	private String _zip;
	private String _isBudgetedRequest;
	private String _isRelatedtoProject;
	private String _projectName;
	private long _projectOwnerId;
	private double _totalCost;
	private double _originalCost;
	private String _reason;
	private String _notes;
	private String _vendorCode;
	private String _vendorEmail;
	private String _contractId;
	private String _purchaseOrder;
	private boolean _itemInStock;
	private Date _recievedDate;
	private Date _returnedDate;
	private String _assetInfo;
	private String _returnedAssets;
	private long _createdBy;
	private Date _createdDate;
	private long _modifiedBy;
	private Date _modifiedDate;
	private Date _originalModifiedDate;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _requestorId;
	private long _originalRequestorId;
	private boolean _setOriginalRequestorId;
	private long _supervisorId;
	private String _status;
	private String _originalStatus;
	private String _stage;
	private String _nextStage;
	private String _isApproverRole;
	private long _columnBitmask;
	private EprocurementRequest _escapedModel;
}