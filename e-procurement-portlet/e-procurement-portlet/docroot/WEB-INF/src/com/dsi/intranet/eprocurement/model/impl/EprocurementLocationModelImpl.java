/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dsi.intranet.eprocurement.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.dsi.intranet.eprocurement.model.EprocurementLocation;
import com.dsi.intranet.eprocurement.model.EprocurementLocationModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EprocurementLocation service. Represents a row in the &quot;eproc_location&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link EprocurementLocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EprocurementLocationImpl}.
 * </p>
 *
 * @author CIGNEX Technologies
 * @see EprocurementLocationImpl
 * @see EprocurementLocation
 * @see EprocurementLocationModel
 * @generated
 */
@ProviderType
public class EprocurementLocationModelImpl extends BaseModelImpl<EprocurementLocation>
	implements EprocurementLocationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a eprocurement location model instance should use the {@link EprocurementLocation} interface instead.
	 */
	public static final String TABLE_NAME = "eproc_location";
	public static final Object[][] TABLE_COLUMNS = {
			{ "locationId", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "location", Types.VARCHAR },
			{ "flowType", Types.VARCHAR },
			{ "locationType", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "personnelArea", Types.VARCHAR },
			{ "personnelSubArea", Types.VARCHAR },
			{ "buildingNumber", Types.VARCHAR },
			{ "appName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("locationId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("flowType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("locationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("personnelSubArea", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("buildingNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table eproc_location (locationId VARCHAR(75) not null primary key,companyId LONG,location VARCHAR(75) null,flowType VARCHAR(75) null,locationType VARCHAR(75) null,address VARCHAR(75) null,personnelArea VARCHAR(75) null,personnelSubArea VARCHAR(75) null,buildingNumber VARCHAR(75) null,appName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table eproc_location";
	public static final String ORDER_BY_JPQL = " ORDER BY eprocurementLocation.locationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY eproc_location.locationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dsi.intranet.eprocurement.model.EprocurementLocation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dsi.intranet.eprocurement.model.EprocurementLocation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.dsi.intranet.eprocurement.model.EprocurementLocation"));

	public EprocurementLocationModelImpl() {
	}

	@Override
	public String getPrimaryKey() {
		return _locationId;
	}

	@Override
	public void setPrimaryKey(String primaryKey) {
		setLocationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _locationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((String)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return EprocurementLocation.class;
	}

	@Override
	public String getModelClassName() {
		return EprocurementLocation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("locationId", getLocationId());
		attributes.put("companyId", getCompanyId());
		attributes.put("location", getLocation());
		attributes.put("flowType", getFlowType());
		attributes.put("locationType", getLocationType());
		attributes.put("address", getAddress());
		attributes.put("personnelArea", getPersonnelArea());
		attributes.put("personnelSubArea", getPersonnelSubArea());
		attributes.put("buildingNumber", getBuildingNumber());
		attributes.put("appName", getAppName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String locationId = (String)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String location = (String)attributes.get("location");

		if (location != null) {
			setLocation(location);
		}

		String flowType = (String)attributes.get("flowType");

		if (flowType != null) {
			setFlowType(flowType);
		}

		String locationType = (String)attributes.get("locationType");

		if (locationType != null) {
			setLocationType(locationType);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String personnelArea = (String)attributes.get("personnelArea");

		if (personnelArea != null) {
			setPersonnelArea(personnelArea);
		}

		String personnelSubArea = (String)attributes.get("personnelSubArea");

		if (personnelSubArea != null) {
			setPersonnelSubArea(personnelSubArea);
		}

		String buildingNumber = (String)attributes.get("buildingNumber");

		if (buildingNumber != null) {
			setBuildingNumber(buildingNumber);
		}

		String appName = (String)attributes.get("appName");

		if (appName != null) {
			setAppName(appName);
		}
	}

	@Override
	public String getLocationId() {
		if (_locationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationId;
		}
	}

	@Override
	public void setLocationId(String locationId) {
		_locationId = locationId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public String getLocation() {
		if (_location == null) {
			return StringPool.BLANK;
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@Override
	public String getFlowType() {
		if (_flowType == null) {
			return StringPool.BLANK;
		}
		else {
			return _flowType;
		}
	}

	@Override
	public void setFlowType(String flowType) {
		_flowType = flowType;
	}

	@Override
	public String getLocationType() {
		if (_locationType == null) {
			return StringPool.BLANK;
		}
		else {
			return _locationType;
		}
	}

	@Override
	public void setLocationType(String locationType) {
		_locationType = locationType;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getPersonnelArea() {
		if (_personnelArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _personnelArea;
		}
	}

	@Override
	public void setPersonnelArea(String personnelArea) {
		_personnelArea = personnelArea;
	}

	@Override
	public String getPersonnelSubArea() {
		if (_personnelSubArea == null) {
			return StringPool.BLANK;
		}
		else {
			return _personnelSubArea;
		}
	}

	@Override
	public void setPersonnelSubArea(String personnelSubArea) {
		_personnelSubArea = personnelSubArea;
	}

	@Override
	public String getBuildingNumber() {
		if (_buildingNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _buildingNumber;
		}
	}

	@Override
	public void setBuildingNumber(String buildingNumber) {
		_buildingNumber = buildingNumber;
	}

	@Override
	public String getAppName() {
		if (_appName == null) {
			return StringPool.BLANK;
		}
		else {
			return _appName;
		}
	}

	@Override
	public void setAppName(String appName) {
		_appName = appName;
	}

	@Override
	public EprocurementLocation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EprocurementLocation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EprocurementLocationImpl eprocurementLocationImpl = new EprocurementLocationImpl();

		eprocurementLocationImpl.setLocationId(getLocationId());
		eprocurementLocationImpl.setCompanyId(getCompanyId());
		eprocurementLocationImpl.setLocation(getLocation());
		eprocurementLocationImpl.setFlowType(getFlowType());
		eprocurementLocationImpl.setLocationType(getLocationType());
		eprocurementLocationImpl.setAddress(getAddress());
		eprocurementLocationImpl.setPersonnelArea(getPersonnelArea());
		eprocurementLocationImpl.setPersonnelSubArea(getPersonnelSubArea());
		eprocurementLocationImpl.setBuildingNumber(getBuildingNumber());
		eprocurementLocationImpl.setAppName(getAppName());

		eprocurementLocationImpl.resetOriginalValues();

		return eprocurementLocationImpl;
	}

	@Override
	public int compareTo(EprocurementLocation eprocurementLocation) {
		String primaryKey = eprocurementLocation.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EprocurementLocation)) {
			return false;
		}

		EprocurementLocation eprocurementLocation = (EprocurementLocation)obj;

		String primaryKey = eprocurementLocation.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<EprocurementLocation> toCacheModel() {
		EprocurementLocationCacheModel eprocurementLocationCacheModel = new EprocurementLocationCacheModel();

		eprocurementLocationCacheModel.locationId = getLocationId();

		String locationId = eprocurementLocationCacheModel.locationId;

		if ((locationId != null) && (locationId.length() == 0)) {
			eprocurementLocationCacheModel.locationId = null;
		}

		eprocurementLocationCacheModel.companyId = getCompanyId();

		eprocurementLocationCacheModel.location = getLocation();

		String location = eprocurementLocationCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			eprocurementLocationCacheModel.location = null;
		}

		eprocurementLocationCacheModel.flowType = getFlowType();

		String flowType = eprocurementLocationCacheModel.flowType;

		if ((flowType != null) && (flowType.length() == 0)) {
			eprocurementLocationCacheModel.flowType = null;
		}

		eprocurementLocationCacheModel.locationType = getLocationType();

		String locationType = eprocurementLocationCacheModel.locationType;

		if ((locationType != null) && (locationType.length() == 0)) {
			eprocurementLocationCacheModel.locationType = null;
		}

		eprocurementLocationCacheModel.address = getAddress();

		String address = eprocurementLocationCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			eprocurementLocationCacheModel.address = null;
		}

		eprocurementLocationCacheModel.personnelArea = getPersonnelArea();

		String personnelArea = eprocurementLocationCacheModel.personnelArea;

		if ((personnelArea != null) && (personnelArea.length() == 0)) {
			eprocurementLocationCacheModel.personnelArea = null;
		}

		eprocurementLocationCacheModel.personnelSubArea = getPersonnelSubArea();

		String personnelSubArea = eprocurementLocationCacheModel.personnelSubArea;

		if ((personnelSubArea != null) && (personnelSubArea.length() == 0)) {
			eprocurementLocationCacheModel.personnelSubArea = null;
		}

		eprocurementLocationCacheModel.buildingNumber = getBuildingNumber();

		String buildingNumber = eprocurementLocationCacheModel.buildingNumber;

		if ((buildingNumber != null) && (buildingNumber.length() == 0)) {
			eprocurementLocationCacheModel.buildingNumber = null;
		}

		eprocurementLocationCacheModel.appName = getAppName();

		String appName = eprocurementLocationCacheModel.appName;

		if ((appName != null) && (appName.length() == 0)) {
			eprocurementLocationCacheModel.appName = null;
		}

		return eprocurementLocationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{locationId=");
		sb.append(getLocationId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", location=");
		sb.append(getLocation());
		sb.append(", flowType=");
		sb.append(getFlowType());
		sb.append(", locationType=");
		sb.append(getLocationType());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", personnelArea=");
		sb.append(getPersonnelArea());
		sb.append(", personnelSubArea=");
		sb.append(getPersonnelSubArea());
		sb.append(", buildingNumber=");
		sb.append(getBuildingNumber());
		sb.append(", appName=");
		sb.append(getAppName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.dsi.intranet.eprocurement.model.EprocurementLocation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>location</column-name><column-value><![CDATA[");
		sb.append(getLocation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flowType</column-name><column-value><![CDATA[");
		sb.append(getFlowType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationType</column-name><column-value><![CDATA[");
		sb.append(getLocationType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personnelArea</column-name><column-value><![CDATA[");
		sb.append(getPersonnelArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personnelSubArea</column-name><column-value><![CDATA[");
		sb.append(getPersonnelSubArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>buildingNumber</column-name><column-value><![CDATA[");
		sb.append(getBuildingNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>appName</column-name><column-value><![CDATA[");
		sb.append(getAppName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = EprocurementLocation.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			EprocurementLocation.class
		};
	private String _locationId;
	private long _companyId;
	private String _location;
	private String _flowType;
	private String _locationType;
	private String _address;
	private String _personnelArea;
	private String _personnelSubArea;
	private String _buildingNumber;
	private String _appName;
	private EprocurementLocation _escapedModel;
}